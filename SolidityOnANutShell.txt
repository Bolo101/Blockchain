int : integer, entiers positifs et negatifs
uint : unsigned integer, entiers positifs

En Solidity utilisation exclusive de uint
La valeur par defaut d'une variable est 0 et non un undefined

uint8 indique que la valeur maxime est 255 (2**8 = 255)
Par defaut uint = uint256
Les uint fonctionnent par paliers de 8

bool pour les booléens, même fonctionnement des setters et getters que pour les uints
address , variable de type addresse, represente une valeur de 20 octets, un utilisateur de la blockchain
string; lorsque specification dans un fonction du type string, rajouter 'memory'

Envoyer de l'ether sur le contrat:
Mettre le montant souhaité dans VALUE
Choisir Ether
Cliquer sur 'Transact'
Actualiser la balance

Mappings, mieux que des tableaux car demandent moins de gaz. Ils n'ont pas de longueur et c'est l'assignation de clés qui permet de les faire grandir

Arrays : Deux types de tableaux en Solidity
Un ttype storage, stocké dans la Blockchain. Hors d'une fonction
Un type memory, temporaire dans une fonction, stockage en mémoire
memory utilisé avec les données complexes comme les tableaux (arrays), les strings et les structs

Incompatibilité type string memory et string memory avec l'operateur == pour verifier une concordance de string dans une structure et d'un argument de function:
Utilisation d'une fonction de hachage après une conversion de bytes : if(keccak256(bytes(properties[i].name)) == keccak256(bytes(_name)))

Pure/view keyword 
Keyword view enables to get a value in the blokchain. We just read it and it is not modified
Pure is used to in a function that aims to realise calculus.
Pure and view functions are represented by a blue button while a function that changes data in the blockchain is orange.

Private/internal/external/public (visibility keywords)/for functions but also variables
Private:can only call the function from the interior of the program. We add an underscore in the private function name
Internal:can only can the function from the interior of the program as a private but can also access the function from contract inheriting this function from another contract
External:can only call function from the exterior of a contract
Public: most permissive visibility keyword

By default a declared variable without visibility keyword is private. That is why we need a getter to read it.
If you declare a variable as public, it will automatically create a getter with the same name as your variable

Storage/Memory/Stack/Calldata
Storage: variable is stored on the blockchain. Default mode for variable out of a function

contract Test{
    uint[] public array;

    function fill() external{
        array.push(2);
        array.push(3);
        
        uint[] storage newarray = array; //storage establish a link between newarray and array. newarray points to array
        newarraytorage[0] = 0; //modify index 0 of array[]. To get a new independant array we use memory
      } 
  }

